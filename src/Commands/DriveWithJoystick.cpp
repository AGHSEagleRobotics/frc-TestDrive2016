// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include <CANTalon.h>
#include <Commands/DriveWithJoystick.h>
#include <Joystick.h>
#include <OI.h>
#include <Subsystems/DriveTrain.h>
#include <WPILib.h>
#include <memory.h>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

DriveWithJoystick::DriveWithJoystick(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveTrain.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void DriveWithJoystick::Initialize() {

}

// Called repeatedly when this Command is scheduled to ru
void DriveWithJoystick::Execute() {
	float joystickX = Robot::oi->getDriveStick()->GetX();
	float joystickY = Robot::oi->getDriveStick()->GetY();
	float joystickZ = Robot::oi->getDriveStick()->GetZ();

//	printf("Original joystick values:\n");
//	printf("%f\n", joystickX);
//	printf("%f\n", joystickY);
//	printf("%f\n", joystickZ);

//	printf("Deadband() joystick values:\n");
	joystickX = Robot::oi->deadband(joystickX); // Accounts for deadband and scales appropriately
	joystickY = Robot::oi->deadband(joystickY); // Accounts for deadband and scales appropriately
	joystickZ = Robot::oi->deadband(joystickZ); // Accounts for deadband and scales appropriately

//	printf("%f\n", joystickX);
//	printf("%f\n", joystickY);
//	printf("%f\n", joystickZ);

//	printf("Joystick values passed to driveTrain:\n");
	//Sets all values for Mecanum Drive
	Robot::driveTrain->drive(joystickX, joystickY, joystickZ);

//	printf("%f\n", joystickX);
//	printf("%f\n", joystickY);
//	printf("%f\n", joystickZ);

}

// Make this return true when this Command no longer needs to run execute()
bool DriveWithJoystick::IsFinished() {
	return false;
}

// Called once after isFinished returns true
void DriveWithJoystick::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void DriveWithJoystick::Interrupted() {

}
