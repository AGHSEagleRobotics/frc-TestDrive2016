// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include <Commands/AutonomousCommand.h>
#include <Commands/DriveWithJoystick.h>
#include <Joystick.h>
#include <OI.h>
#include <SmartDashboard/SmartDashboard.h>

#define DEADBAND 0.1

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

OI::OI() {
	// Process operator interface input here.
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	driveStick.reset(new Joystick(0));

	// SmartDashboard Buttons
	SmartDashboard::PutData("DriveWithJoystick", new DriveWithJoystick());
	SmartDashboard::PutData("Autonomous Command", new AutonomousCommand());

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}

//Checks to see if joystick value is within deadband, if it is not, then scale the value using scale()
//void OI::deadband(float &joystick) {
//	if (joystick < DEADBAND && joystick > DEADBAND * -1) {
//		joystick = 0;
//	} else {
//		this->scale(joystick);
//	}
//}

float OI::deadband(float joystick) {
	if (joystick < DEADBAND && joystick > DEADBAND * -1) {
		joystick = 0;
	} else {
//		joystick = scale(joystick);
	}

	return joystick;
}

//Scales the joystick value so that just out of deadband range becomes 0
float OI::scale(float joystick) {
	if (joystick < 0)
		joystick += DEADBAND;
	else
		joystick -= DEADBAND;
	joystick =  joystick / (1 - DEADBAND);
	// Number is now between max/min value and deadband, and scaled
//	joystick = joystick * (1 / (1 - DEADBAND));

//	printf("Printing scaled joystick value before deadband: ");
//	printf("%f\n", joystick);
	return joystick;
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

std::shared_ptr<Joystick> OI::getDriveStick() {
	return driveStick;
}

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
